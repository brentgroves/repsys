{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "776121"
    },
    "items": [
        {
            "metadata": {
                "name": "cilium",
                "namespace": "kube-system",
                "uid": "b3258bad-98a6-4f35-b098-dc81449287d9",
                "resourceVersion": "1030",
                "generation": 3,
                "creationTimestamp": "2025-05-16T23:33:29Z",
                "labels": {
                    "app.kubernetes.io/managed-by": "Helm",
                    "app.kubernetes.io/name": "cilium-agent",
                    "app.kubernetes.io/part-of": "cilium",
                    "k8s-app": "cilium"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "3",
                    "meta.helm.sh/release-name": "ck-network",
                    "meta.helm.sh/release-namespace": "kube-system"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "cilium"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app.kubernetes.io/name": "cilium-agent",
                            "app.kubernetes.io/part-of": "cilium",
                            "k8s-app": "cilium"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "tmp",
                                "emptyDir": {}
                            },
                            {
                                "name": "cilium-run",
                                "hostPath": {
                                    "path": "/var/run/cilium",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "cilium-netns",
                                "hostPath": {
                                    "path": "/var/run/netns",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "bpf-maps",
                                "hostPath": {
                                    "path": "/sys/fs/bpf",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "hostproc",
                                "hostPath": {
                                    "path": "/proc",
                                    "type": "Directory"
                                }
                            },
                            {
                                "name": "cilium-cgroup",
                                "hostPath": {
                                    "path": "/run/cilium/cgroupv2",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "cni-path",
                                "hostPath": {
                                    "path": "/opt/cni/bin",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "etc-cni-netd",
                                "hostPath": {
                                    "path": "/etc/cni/net.d",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "clustermesh-secrets",
                                "projected": {
                                    "sources": [
                                        {
                                            "secret": {
                                                "name": "cilium-clustermesh",
                                                "optional": true
                                            }
                                        },
                                        {
                                            "secret": {
                                                "name": "clustermesh-apiserver-remote-cert",
                                                "items": [
                                                    {
                                                        "key": "tls.key",
                                                        "path": "common-etcd-client.key"
                                                    },
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "common-etcd-client.crt"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "common-etcd-client-ca.crt"
                                                    }
                                                ],
                                                "optional": true
                                            }
                                        },
                                        {
                                            "secret": {
                                                "name": "clustermesh-apiserver-local-cert",
                                                "items": [
                                                    {
                                                        "key": "tls.key",
                                                        "path": "local-etcd-client.key"
                                                    },
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "local-etcd-client.crt"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "local-etcd-client-ca.crt"
                                                    }
                                                ],
                                                "optional": true
                                            }
                                        }
                                    ],
                                    "defaultMode": 256
                                }
                            },
                            {
                                "name": "host-proc-sys-net",
                                "hostPath": {
                                    "path": "/proc/sys/net",
                                    "type": "Directory"
                                }
                            },
                            {
                                "name": "host-proc-sys-kernel",
                                "hostPath": {
                                    "path": "/proc/sys/kernel",
                                    "type": "Directory"
                                }
                            },
                            {
                                "name": "hubble-tls",
                                "projected": {
                                    "sources": [
                                        {
                                            "secret": {
                                                "name": "hubble-server-certs",
                                                "items": [
                                                    {
                                                        "key": "tls.crt",
                                                        "path": "server.crt"
                                                    },
                                                    {
                                                        "key": "tls.key",
                                                        "path": "server.key"
                                                    },
                                                    {
                                                        "key": "ca.crt",
                                                        "path": "client-ca.crt"
                                                    }
                                                ],
                                                "optional": true
                                            }
                                        }
                                    ],
                                    "defaultMode": 256
                                }
                            }
                        ],
                        "initContainers": [
                            {
                                "name": "config",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "cilium-dbg",
                                    "build-config"
                                ],
                                "env": [
                                    {
                                        "name": "K8S_NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CILIUM_K8S_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_HOST",
                                        "value": "127.0.0.1"
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_PORT",
                                        "value": "6443"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "tmp",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "mount-cgroup",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "sh",
                                    "-ec",
                                    "cp /usr/bin/cilium-mount /hostbin/cilium-mount;\nnsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-mount\" $CGROUP_ROOT;\nrm /hostbin/cilium-mount\n"
                                ],
                                "env": [
                                    {
                                        "name": "CGROUP_ROOT",
                                        "value": "/run/cilium/cgroupv2"
                                    },
                                    {
                                        "name": "BIN_PATH",
                                        "value": "/opt/cni/bin"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "hostproc",
                                        "mountPath": "/hostproc"
                                    },
                                    {
                                        "name": "cni-path",
                                        "mountPath": "/hostbin"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "SYS_ADMIN",
                                            "SYS_CHROOT",
                                            "SYS_PTRACE"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "seLinuxOptions": {
                                        "type": "spc_t",
                                        "level": "s0"
                                    }
                                }
                            },
                            {
                                "name": "apply-sysctl-overwrites",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "sh",
                                    "-ec",
                                    "cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;\nnsenter --mount=/hostproc/1/ns/mnt \"${BIN_PATH}/cilium-sysctlfix\";\nrm /hostbin/cilium-sysctlfix\n"
                                ],
                                "env": [
                                    {
                                        "name": "BIN_PATH",
                                        "value": "/opt/cni/bin"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "hostproc",
                                        "mountPath": "/hostproc"
                                    },
                                    {
                                        "name": "cni-path",
                                        "mountPath": "/hostbin"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "SYS_ADMIN",
                                            "SYS_CHROOT",
                                            "SYS_PTRACE"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "seLinuxOptions": {
                                        "type": "spc_t",
                                        "level": "s0"
                                    }
                                }
                            },
                            {
                                "name": "mount-bpf-fs",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "/bin/bash",
                                    "-c",
                                    "--"
                                ],
                                "args": [
                                    "mount | grep \"/sys/fs/bpf type bpf\" || mount -t bpf bpf /sys/fs/bpf"
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "bpf-maps",
                                        "mountPath": "/sys/fs/bpf",
                                        "mountPropagation": "Bidirectional"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            },
                            {
                                "name": "clean-cilium-state",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "/init-container.sh"
                                ],
                                "env": [
                                    {
                                        "name": "CILIUM_ALL_STATE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "name": "cilium-config",
                                                "key": "clean-cilium-state",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "CILIUM_BPF_STATE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "name": "cilium-config",
                                                "key": "clean-cilium-bpf-state",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "WRITE_CNI_CONF_WHEN_READY",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "name": "cilium-config",
                                                "key": "write-cni-conf-when-ready",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_HOST",
                                        "value": "127.0.0.1"
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_PORT",
                                        "value": "6443"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "bpf-maps",
                                        "mountPath": "/sys/fs/bpf"
                                    },
                                    {
                                        "name": "cilium-cgroup",
                                        "mountPath": "/run/cilium/cgroupv2",
                                        "mountPropagation": "HostToContainer"
                                    },
                                    {
                                        "name": "cilium-run",
                                        "mountPath": "/var/run/cilium"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_ADMIN",
                                            "SYS_MODULE",
                                            "SYS_ADMIN",
                                            "SYS_RESOURCE"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "seLinuxOptions": {
                                        "type": "spc_t",
                                        "level": "s0"
                                    }
                                }
                            },
                            {
                                "name": "install-cni-binaries",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "/install-plugin.sh"
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "10Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "cni-path",
                                        "mountPath": "/host/opt/cni/bin"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "seLinuxOptions": {
                                        "type": "spc_t",
                                        "level": "s0"
                                    }
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "cilium-agent",
                                "image": "ghcr.io/canonical/cilium:1.16.3-ck0",
                                "command": [
                                    "cilium-agent"
                                ],
                                "args": [
                                    "--config-dir=/tmp/cilium/config-map"
                                ],
                                "env": [
                                    {
                                        "name": "K8S_NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CILIUM_K8S_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "CILIUM_CLUSTERMESH_CONFIG",
                                        "value": "/var/lib/cilium/clustermesh/"
                                    },
                                    {
                                        "name": "GOMEMLIMIT",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "resource": "limits.memory",
                                                "divisor": "1"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_HOST",
                                        "value": "127.0.0.1"
                                    },
                                    {
                                        "name": "KUBERNETES_SERVICE_PORT",
                                        "value": "6443"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "host-proc-sys-net",
                                        "mountPath": "/host/proc/sys/net"
                                    },
                                    {
                                        "name": "host-proc-sys-kernel",
                                        "mountPath": "/host/proc/sys/kernel"
                                    },
                                    {
                                        "name": "bpf-maps",
                                        "mountPath": "/sys/fs/bpf",
                                        "mountPropagation": "HostToContainer"
                                    },
                                    {
                                        "name": "cilium-run",
                                        "mountPath": "/var/run/cilium"
                                    },
                                    {
                                        "name": "cilium-netns",
                                        "mountPath": "/var/run/cilium/netns",
                                        "mountPropagation": "HostToContainer"
                                    },
                                    {
                                        "name": "etc-cni-netd",
                                        "mountPath": "/host/etc/cni/net.d"
                                    },
                                    {
                                        "name": "clustermesh-secrets",
                                        "readOnly": true,
                                        "mountPath": "/var/lib/cilium/clustermesh"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "hubble-tls",
                                        "readOnly": true,
                                        "mountPath": "/var/lib/cilium/tls/hubble"
                                    },
                                    {
                                        "name": "tmp",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 9879,
                                        "host": "127.0.0.1",
                                        "scheme": "HTTP",
                                        "httpHeaders": [
                                            {
                                                "name": "brief",
                                                "value": "true"
                                            }
                                        ]
                                    },
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "failureThreshold": 10
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 9879,
                                        "host": "127.0.0.1",
                                        "scheme": "HTTP",
                                        "httpHeaders": [
                                            {
                                                "name": "brief",
                                                "value": "true"
                                            }
                                        ]
                                    },
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "startupProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 9879,
                                        "host": "127.0.0.1",
                                        "scheme": "HTTP",
                                        "httpHeaders": [
                                            {
                                                "name": "brief",
                                                "value": "true"
                                            }
                                        ]
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 2,
                                    "successThreshold": 1,
                                    "failureThreshold": 105
                                },
                                "lifecycle": {
                                    "postStart": {
                                        "exec": {
                                            "command": [
                                                "bash",
                                                "-c",
                                                "set -o errexit\nset -o pipefail\nset -o nounset\n\n# When running in AWS ENI mode, it's likely that 'aws-node' has\n# had a chance to install SNAT iptables rules. These can result\n# in dropped traffic, so we should attempt to remove them.\n# We do it using a 'postStart' hook since this may need to run\n# for nodes which might have already been init'ed but may still\n# have dangling rules. This is safe because there are no\n# dependencies on anything that is part of the startup script\n# itself, and can be safely run multiple times per node (e.g. in\n# case of a restart).\nif [[ \"$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')\" != \"0\" ]];\nthen\n    echo 'Deleting iptables rules created by the AWS CNI VPC plugin'\n    iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore\nfi\necho 'Done!'\n"
                                            ]
                                        }
                                    },
                                    "preStop": {
                                        "exec": {
                                            "command": [
                                                "/cni-uninstall.sh"
                                            ]
                                        }
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "CHOWN",
                                            "KILL",
                                            "NET_ADMIN",
                                            "NET_RAW",
                                            "IPC_LOCK",
                                            "SYS_MODULE",
                                            "SYS_ADMIN",
                                            "SYS_RESOURCE",
                                            "DAC_OVERRIDE",
                                            "FOWNER",
                                            "SETGID",
                                            "SETUID"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "seLinuxOptions": {
                                        "type": "spc_t",
                                        "level": "s0"
                                    }
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 1,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "cilium",
                        "serviceAccount": "cilium",
                        "automountServiceAccountToken": true,
                        "hostNetwork": true,
                        "securityContext": {
                            "appArmorProfile": {
                                "type": "Unconfined"
                            }
                        },
                        "affinity": {
                            "podAntiAffinity": {
                                "requiredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "labelSelector": {
                                            "matchLabels": {
                                                "k8s-app": "cilium"
                                            }
                                        },
                                        "topologyKey": "kubernetes.io/hostname"
                                    }
                                ]
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 2,
                        "maxSurge": 0
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 3,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        },
        {
            "metadata": {
                "name": "ck-storage-rawfile-csi-node",
                "namespace": "kube-system",
                "uid": "2ce47c84-c0cd-439e-a8ac-e1f922cdb061",
                "resourceVersion": "1243",
                "generation": 1,
                "creationTimestamp": "2025-05-16T23:33:27Z",
                "labels": {
                    "app.kubernetes.io/managed-by": "Helm"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1",
                    "meta.helm.sh/release-name": "ck-storage",
                    "meta.helm.sh/release-namespace": "kube-system"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/instance": "ck-storage",
                        "app.kubernetes.io/name": "rawfile-csi",
                        "component": "node"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app.kubernetes.io/instance": "ck-storage",
                            "app.kubernetes.io/name": "rawfile-csi",
                            "component": "node"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "registration-dir",
                                "hostPath": {
                                    "path": "/var/lib/kubelet/plugins_registry",
                                    "type": "Directory"
                                }
                            },
                            {
                                "name": "socket-dir",
                                "hostPath": {
                                    "path": "/var/lib/kubelet/plugins/rawfile-csi",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "mountpoint-dir",
                                "hostPath": {
                                    "path": "/var/lib/kubelet",
                                    "type": "DirectoryOrCreate"
                                }
                            },
                            {
                                "name": "data-dir",
                                "hostPath": {
                                    "path": "/var/snap/k8s/common/rawfile-storage",
                                    "type": "DirectoryOrCreate"
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "csi-driver",
                                "image": "ghcr.io/canonical/rawfile-localpv:0.8.0-ck4",
                                "ports": [
                                    {
                                        "name": "metrics",
                                        "containerPort": 9100,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "csi-probe",
                                        "containerPort": 9808,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "PROVISIONER_NAME",
                                        "value": "rawfile.csi.openebs.io"
                                    },
                                    {
                                        "name": "CSI_ENDPOINT",
                                        "value": "unix:///csi/csi.sock"
                                    },
                                    {
                                        "name": "IMAGE_REPOSITORY",
                                        "value": "ghcr.io/canonical/rawfile-localpv"
                                    },
                                    {
                                        "name": "NODE_ID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "100Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "100Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "socket-dir",
                                        "mountPath": "/csi"
                                    },
                                    {
                                        "name": "mountpoint-dir",
                                        "mountPath": "/var/lib/kubelet",
                                        "mountPropagation": "Bidirectional"
                                    },
                                    {
                                        "name": "data-dir",
                                        "mountPath": "/data"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "Always",
                                "securityContext": {
                                    "privileged": true
                                }
                            },
                            {
                                "name": "node-driver-registrar",
                                "image": "ghcr.io/canonical/k8s-snap/sig-storage/csi-node-driver-registrar:v2.10.1",
                                "args": [
                                    "--csi-address=$(ADDRESS)",
                                    "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)",
                                    "--health-port=9809"
                                ],
                                "ports": [
                                    {
                                        "name": "healthz",
                                        "containerPort": 9809,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "ADDRESS",
                                        "value": "/csi/csi.sock"
                                    },
                                    {
                                        "name": "DRIVER_REG_SOCK_PATH",
                                        "value": "/var/lib/kubelet/plugins/rawfile-csi/csi.sock"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "500m",
                                        "memory": "100Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "100Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "socket-dir",
                                        "mountPath": "/csi"
                                    },
                                    {
                                        "name": "registration-dir",
                                        "mountPath": "/registration"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "external-provisioner",
                                "image": "ghcr.io/canonical/k8s-snap/sig-storage/csi-provisioner:v5.0.1",
                                "args": [
                                    "--csi-address=$(ADDRESS)",
                                    "--feature-gates=Topology=true",
                                    "--strict-topology",
                                    "--immediate-topology=false",
                                    "--timeout=120s",
                                    "--enable-capacity=true",
                                    "--capacity-ownerref-level=1",
                                    "--node-deployment=true"
                                ],
                                "env": [
                                    {
                                        "name": "ADDRESS",
                                        "value": "/csi/csi.sock"
                                    },
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "socket-dir",
                                        "mountPath": "/csi"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "external-snapshotter",
                                "image": "ghcr.io/canonical/k8s-snap/sig-storage/csi-snapshotter:v8.0.1",
                                "args": [
                                    "--csi-address=$(ADDRESS)",
                                    "--node-deployment=true",
                                    "--extra-create-metadata=true"
                                ],
                                "env": [
                                    {
                                        "name": "ADDRESS",
                                        "value": "/csi/csi.sock"
                                    },
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "socket-dir",
                                        "mountPath": "/csi"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "ck-storage-rawfile-csi-driver",
                        "serviceAccount": "ck-storage-rawfile-csi-driver",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "100%",
                        "maxSurge": 0
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
